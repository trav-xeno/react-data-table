{"version":3,"sources":["data/EmployeeList.js","components/SearchTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","firstName","lastName","email","role","startyear","pay","SearchTable","employeeList","useState","searched","setSearched","filter","text","nameTest","filtered","el","toLowerCase","trim","indexOf","console","log","filterName","length","roles","filterRole","emails","filterEmail","sortBy","field","a","b","nameA","toUpperCase","nameB","sort","sortType","sortName","slice","sortLastName","sortPay","sortRole","sortEmail","className","id","aria-describedby","placeholder","minLength","debounceTimeout","onChange","e","target","value","scope","onClick","map","employee","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c74d5a63.chunk.js","sourcesContent":["const data = [\n    {   \n        firstName: \"Emp1\",\n        lastName: \"Emp1\",\n        email: \"emp1@test.com\",\n        role: \"Developer\",\n        startyear: \"02/04/1920\",\n        pay: 65000,       \n    },\n    {\n        firstName: \"Emp2\",\n        lastName: \"Emp2\",\n        email: \"Emp2@test.com\",\n        role: \"HR\",\n        startyear: \"05/04/0852\",\n        pay: 50000,       \n    }, {\n        firstName: \"Emp3\",\n        lastName: \"Emp3\",\n        email: \"emp3@test.com\",\n        role: \"R&D\",\n        startyear: \"01/04/1600\",\n        pay: 65000,       \n    },\n    {\n        firstName: \"Alpha\",\n        lastName: \"AI\",\n        email: \"alpha1@test.com\",\n        role: \"R&D\",\n        startyear: \"09/22/2500\",\n        pay: 0,       \n    }, {\n        firstName: \"Delta\",\n        lastName: \"AI\",\n        email: \"Delta@test.com\",\n        role: \"AI\",\n        startyear: \"02/04/2599\",\n        pay: 0,       \n    }, {\n        firstName: \"Bobby\",\n        lastName: \"Hoftmen\",\n        email: \"forbobby@test.com\",\n        role: \"Developer\",\n        startyear: \"02/04/2019\",\n        pay: 100000,       \n    }, {\n        firstName: \"Mike\",\n        lastName: \"Feamley\",\n        email: \"himike@test.com\",\n        role: \"Developer\",\n        startyear: \"05/17/2019\",\n        pay: 100000,       \n    },\n  \n\n];\nmodule.exports = data ;","import React, {useState } from \"react\";\nimport {DebounceInput} from 'react-debounce-input';\nimport \"./searchtable.css\" ;\n\ntype listProps = {\n    employeeList: any,\n  } \n\nconst SearchTable = ({employeeList}: listProps) => {\n    // {firstName:String, lastName:string, role:string, email:string, pay:number}\n    //const [list, setstate] = useState(employeeList);\n    const [searched, setSearched] = useState(employeeList);\n    //const [show, setShow ] = useState(false);\n    //usereduce to replace both top stuff \n    const filterName = (text:string):Array<any> => {\n        //let filtered:Array<any> = [];\n        let filtered = employeeList.filter( (el:any) => {\n              let fullName = `${el.firstName} ${el.lastName}`;\n             return fullName.toLowerCase().trim().indexOf(text) > -1 ;\n           });\n        \n        console.log(filtered);\n        return filtered ;\n    }\n\n    // filter roles\n    const filterRole = (text:string):Array<any> => {\n      //let filtered:Array<any> = [];\n      let filtered = employeeList.filter( (el:any) => {\n           return el.role.toLowerCase().trim().indexOf(text) > -1 ;\n         });\n    \n      console.log(filtered );\n      return filtered ;\n  }\n\n    //greedy filter all text combined\n    /*\n    const filterText = (text:string):Array<any> =>{\n      let results = employeeList.filter( (el:any) => {\n        let alltext = `${el.firstName}${el.lastNAme}${el.role}${el.email}`;\n        return alltext.toLowerCase().trim().indexOf(text) > -1\n      } );\n      return results;\n    }*/\n\n    // filter pay \n    /*\n    const filterPay = (text:string): Array<any> => {\n      //let payList:Array<any> = [];\n        let payList = employeeList.filter( (el:any) => {\n        let pay = \"\" + el.pay ; \n        return pay.trim().indexOf(text) > -1 ;\n        });\n    \n      return payList ;\n    }*/\n    const filterEmail = (text:string):Array<any> => {\n      let results = employeeList.filter( (el:any) => {\n        let email = el.email ;\n        return email.toLowerCase().trim().indexOf(text) > -1\n      } );\n      return results;\n    }\n\n    //call filters based on returens from other filters \n    const filter = (text:string) =>{\n        //return filterText(text);\n        let nameTest = filterName(text); \n        if(nameTest.length){\n            console.log(\"found name match\");\n            setSearched(nameTest);\n        } else if( !nameTest.length ){\n          console.log(\"checking roles\");\n          let roles = filterRole(text);\n          if( roles.length ){\n           setSearched(roles);\n          } else {\n            console.log(\"test email\");\n            let emails = filterEmail(text);\n             if( emails.length){ \n               setSearched(emails);\n              } else {\n                setSearched([]);\n              } ;\n          }\n        }  \n   }\n   const sortBy = (field:string) => {\n    return function(a:any, b:any) {\n      var nameA = a[field].toUpperCase(); // ignore upper and lowercase\n      var nameB = b[field].toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      // names must be equal\n      return 0;\n      \n      /*\n        if (a[field] > b[field]) {\n            return -1;\n        } else if (a[field] < b[field]) {\n            return 1;\n        }\n        return 0;*/\n       }\n   }\n   //search based on input if its a number test numbers \n    \n       const sort = ( sortType:string) =>{\n         switch(sortType){\n           case \"firstName\":\n             console.log(sortType);\n             let sortName  = searched.slice().sort(sortBy(sortType));\n             setSearched( sortName );\n             break;\n           case \"lastName\":\n            console.log(sortType);\n            let sortLastName  = searched.slice().sort(sortBy(sortType));\n             setSearched( sortLastName );\n            break;\n           case \"pay\":\n            console.log(sortType);\n            let sortPay = searched.slice().sort( (a:any, b:any) => a.pay - b.pay );\n            setSearched( sortPay );\n            break;\n           case \"role\":\n            console.log(sortType);\n            let sortRole  = searched.slice().sort(sortBy(sortType));\n             setSearched( sortRole );\n            //searched.sort( sortText(a,b) );\n            break;\n          case \"email\":\n            console.log(sortType);\n            let sortEmail  = searched.slice().sort(sortBy(sortType));\n            setSearched( sortEmail );\n            break;\n         }\n       }\n       const search = (text:any) =>{\n           text = text.toLowerCase();\n            if(text.length){\n               return filter(text);\n            }else{\n              return setSearched(employeeList) ;\n            }\n       }\n       /*\n       const [state, dispatch] = useReducer( (state:any, action:any) =>{\n        //could make action an object then deconstruct it\n        switch(action.actionType){\n          case \"filter\":\n            return  search(  action.text);\n          case \"sort\":\n            sort(action.text);\n            return state; \n           default:\n            return state ; \n        }\n  \n      }, {og: employeeList, search: employeeList, sort:0 });*/\n       //  if invalid input \n       /*let errorAlert = null ;\n       if( show  ){\n        errorAlert = (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            Please enter valid search characters! \n          </div>\n        );\n      \n      }*/\n      //<th scope=\"col\" onClick={() => dispatch({ actionType:\"sort\"   ,text: \"firstName\" }) }>First Name</th>\n      // onChange={e => search(e.target.value.toLowerCase()) }  {errorAlert}\n    return ( \n     <>\n   \n    <div className=\"row mb-3 card\">\n    <div className=\"form-group mx-auto my-3\">\n       <label>Search Employee Table</label>\n       <DebounceInput\n          className=\"form-control\"  id=\"search\" aria-describedby=\"search input\" placeholder=\"Search text\"\n          minLength={1}\n          debounceTimeout={1000}\n          onChange={(e) => search(e.target.value)} />\n      <small id=\"search\" className=\"form-text text-muted\">Search will dynamically change the table below!</small>\n    </div>\n  </div>\n  <div className=\"row\">\n    <table className=\"table table-hover\">\n      <thead className=\"thead-bg\">\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\" className=\"t-th\" onClick={() => sort(\"firstName\") }>First Name</th>\n          <th scope=\"col\" className=\"t-th\"  onClick={() => sort(\"lastName\") }>Last Name</th>\n          <th scope=\"col\" className=\"t-th\"  onClick={() => sort(\"role\") }>Role</th>\n          <th scope=\"col\" className=\"t-th\"  onClick={() => sort(\"email\") }>Email</th>\n          <th scope=\"col\" className=\"t-th\"  onClick={() => sort(\"pay\") }>Pay</th>\n        </tr>\n      </thead>\n      <tbody>\n      { searched.map((employee:any, index:number) => {\n      return (\n          <tr key={index}>\n            <td>{index}</td>\n            <td>{employee.firstName}</td>\n            <td>{employee.lastName}</td>\n            <td>{employee.role}</td>\n            <td>{employee.email}</td>\n            <td>{employee.pay}</td>\n          </tr>\n       )\n     })\n    }\n      </tbody>\n    </table>\n  </div>\n  </>\n)\n}\n\nexport default SearchTable;\n\n\n\n\n","import React from 'react';\nimport './App.css';\nimport employeeList from \"./data/EmployeeList\";\nimport SearchTable from \"./components/SearchTable\";\nfunction App() {\n\n  return (\n     <>\n      <header className=\"headers row mb-4\">\n        <h1 className=\"col-12\">React Employee Filter </h1>\n      </header>\n      <main className=\"container\">\n        <SearchTable employeeList={employeeList}/>\n      </main>\n     </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/*  <React.StrictMode>\n    <App />\n  </React.StrictMode>, */\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n</React.StrictMode>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}